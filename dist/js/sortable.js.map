{"version":3,"names":[],"mappings":"","sources":["sortable.js"],"sourcesContent":["class Sortable {\n  constructor (el) {\n    this.el = $(el);\n    this.isTouched;\n    this.isMoved;\n    this.touchStartY;\n    this.touchesDiff;\n    this.$sortingEl;\n    this.$sortingItems;\n    this.$container = $('.swipe-panel > .panel-body');\n    this.$sortableContainer;\n    this.sortingElHeight;\n    this.minTop;\n    this.maxTop;\n    this.$insertAfterEl;\n    this.$insertBeforeEl;\n    this.indexFrom;\n    this.$pageEl;\n    this.$pageContentEl;\n    this.pageHeight;\n    this.pageOffset;\n    this.sortingElOffsetLocal;\n    this.sortingElOffsetTop;\n    this.initialScrollTop;\n\n    $(document).on('touchstart', '.list.sortable .sortable-handler', (e) => { this.handleTouchStart(e) });\n    this.el.on('touchmove', (e) => { this.handleTouchMove(e) });\n    this.el.on('touchend', (e) => { this.handleTouchEnd(e) });\n  }\n\n  handleTouchStart(e) {\n    console.log('handleTouchStart', this.el)\n    this.isMoved = false;\n    this.isTouched = true;\n    this.touchStartY = e.type === 'touchstart' ? e.originalEvent.targetTouches[0].pageY : e.pageY;\n    this.$sortingEl = $(e.target).parents('li');\n    this.indexFrom = this.el.find('li').index(this.$sortingEl);\n    this.$sortableContainer = this.$sortingEl.parents('.sortable');\n    const $listGroup = this.$sortingEl.parents('.list-group');\n    if ($listGroup.length && $listGroup.parents(this.$sortableContainer).length) {\n      this.$sortableContainer = $listGroup;\n    }\n\n    this.$sortingItems = this.$sortableContainer.children('ul').children('li');\n  }\n\n  handleTouchMove(e) {\n    console.log('handleTouchMove', e, this.isTouched, this.isMoved)\n    if (!this.isTouched || !this.$sortingEl) return;\n    const pageY = e.type === 'touchmove' ? e.originalEvent.targetTouches[0].pageY : e.pageY;\n    const paddingTop = 0;\n    const paddingBottom = 0;\n    if (!this.isMoved) {\n      this.$pageEl = this.$sortingEl.parents('body');\n      this.$pageContentEl = this.$container;\n      this.initialScrollTop = this.$container[0].scrollTop;\n      this.pageOffset = this.$pageEl.offset().top + paddingTop;\n      this.pageHeight = this.$pageEl.height() - paddingTop - paddingBottom;\n      this.$sortingEl.addClass('sorting');\n      this.$sortableContainer.addClass('sortable-sorting');\n      this.sortingElOffsetLocal = this.$sortingEl[0].offsetTop;\n      this.minTop = this.$sortingEl[0].offsetTop;\n      this.maxTop = this.$sortingEl.parent().height() - this.sortingElOffsetLocal - this.$sortingEl.height();\n      this.sortingElHeight = this.$sortingEl[0].offsetHeight;\n      this.sortingElOffsetTop = this.$sortingEl.offset().top;\n    }\n    this.isMoved = true;\n\n    e.preventDefault();\n\n    this.touchesDiff = pageY - this.touchStartY;\n\n    const translateScrollOffset = this.$pageContentEl[0].scrollTop - this.initialScrollTop;\n    const translate = Math.min(Math.max(this.touchesDiff + translateScrollOffset, -this.minTop), this.maxTop);\n\n    this.$sortingEl.css('transform',`translate3d(0,${translate}px,0)`);\n\n    const scrollAddition = 44;\n    let allowScroll = true;\n    if ((this.touchesDiff + this.translateScrollOffset) + this.scrollAddition < -this.minTop) {\n      this.allowScroll = false;\n    }\n    if ((this.touchesDiff + this.translateScrollOffset) - this.scrollAddition > this.maxTop) {\n      this.allowScroll = false;\n    }\n\n    this.$insertBeforeEl = undefined;\n    this.$insertAfterEl = undefined;\n\n    let scrollDiff;\n    if (allowScroll) {\n      if (this.sortingElOffsetTop + this.touchesDiff + this.sortingElHeight + this.scrollAddition > this.pageOffset + this.pageHeight) {\n        // To Bottom\n        scrollDiff = (this.sortingElOffsetTop + this.touchesDiff + this.sortingElHeight + this.scrollAddition) - (this.pageOffset + this.pageHeight);\n      }\n      if (this.sortingElOffsetTop + this.touchesDiff < this.pageOffset + scrollAddition) {\n        // To Top\n        scrollDiff = (this.sortingElOffsetTop + this.touchesDiff) - this.pageOffset - this.scrollAddition;\n      }\n      if (scrollDiff) {\n        this.$pageContentEl[0].scrollTop += scrollDiff;\n      }\n    }\n\n    this.$sortingItems.each((index, el) => {\n      const $currentEl = $(el);\n\n      if ($currentEl[0] === this.$sortingEl[0]) return;\n      const currentElOffset = $currentEl[0].offsetTop;\n      const currentElHeight = $currentEl.height();\n      const sortingElOffset = this.sortingElOffsetLocal + translate;\n      let currentIdx = this.$sortingItems.index(el)\n      let sortingElIdx = this.$sortingItems.index(this.$sortingEll)\n      \n      if ((sortingElOffset >= currentElOffset - (currentElHeight / 2)) && this.indexFrom < currentIdx) {\n        $currentEl.css('transition',`transform .2s`);\n        $currentEl.css('transform',`translate3d(0, ${-this.sortingElHeight}px,0)`);\n        this.$insertAfterEl = $currentEl;\n        this.$insertBeforeEl = undefined;\n      } else if ((sortingElOffset <= currentElOffset + (currentElHeight / 2)) && this.indexFrom > currentIdx) {\n        $currentEl.css('transition',`transform .2s`);\n        $currentEl.css('transform',`translate3d(0, ${this.sortingElHeight}px,0)`);\n        this.$insertAfterEl = undefined;\n        if (!this.$insertBeforeEl) this.$insertBeforeEl = $currentEl;\n      } else {\n        $currentEl.css('transform','translate3d(0, 0%,0)');\n      }\n    });\n  }\n  handleTouchEnd () {\n    if (!this.isTouched || !this.isMoved) {\n      this.isTouched = false;\n      this.isMoved = false;\n      return;\n    }\n    \n    this.$sortingItems.css('transition',``);\n    this.$sortingItems.css('transform', '');\n    this.$sortingEl.removeClass('sorting');\n    this.$sortableContainer.removeClass('sortable-sorting');\n\n    let virtualList;\n    let oldIndex;\n    let newIndex;\n    \n    if (this.$insertAfterEl) {\n      this.$sortingEl.insertAfter(this.$insertAfterEl);\n    }\n    if (this.$insertBeforeEl) {\n      this.$sortingEl.insertBefore(this.$insertBeforeEl);\n    }\n  \n    if ((this.$insertAfterEl || this.$insertBeforeEl)\n       && this.$sortableContainer.hasClass('virtual-list')\n    ) {\n      virtualList = this.$sortableContainer[0].f7VirtualList;\n      oldIndex = this.$sortingEl[0].f7VirtualListIndex;\n      newIndex = this.$insertBeforeEl ? this.$insertBeforeEl[0].f7VirtualListIndex : this.$insertAfterEl[0].f7VirtualListIndex;\n      if (virtualList) virtualList.moveItem(oldIndex, newIndex);\n    }\n\n    // this.$sortingEl.trigger('sortable:sort', { from: indexFrom, to: $sortingEl.index() });\n    // app.emit('sortableSort', $sortingEl[0], { from: indexFrom, to: $sortingEl.index() });\n\n    this.$insertBeforeEl = undefined;\n    this.$insertAfterEl = undefined;\n    this.isTouched = false;\n    this.isMoved = false;\n  }\n  enable() {\n    if (this.el.length === 0) return;\n    this.el.addClass('sortable-enabled');\n    this.el.trigger('sortable:enable');\n  }\n  disable() {\n    if (this.el.length === 0) return;\n    this.el.removeClass('sortable-enabled');\n    this.el.trigger('sortable:disable');\n  }\n  toggle() {\n    if (this.el.length === 0) return;\n    if (this.el.hasClass('sortable-enabled')) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  }\n}\n\n(function() {\n  const sorting = new Sortable('.list.sortable');\n  sorting.enable();\n})();"],"file":"sortable.js"}