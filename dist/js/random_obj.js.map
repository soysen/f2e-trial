{"version":3,"names":[],"mappings":"","sources":["random_obj.js"],"sourcesContent":["window.createjs = this.createjs = require('createjs-module');\nrequire('createjs-easeljs');\nrequire('hammerjs');\n// RotationPlugin.install(props);\n\nclass RandomObj {\n  constructor(id) {\n    this.id = id\n    this.canvas = document.querySelector(\"#\" + id)\n    this.mc = new Hammer.Manager(this.canvas)\n    this.outer_w = window.innerWidth\n    this.outer_h = window.innerHeight\n    this.canvas.width = this.outer_w\n    this.canvas.height = this.outer_h\n    this.stage = new createjs.Stage(this.id)\n    this.queue = new createjs.LoadQueue()\n    this.lastMousePos = { x: 0, y: 0 }\n    this.objects = []\n    this.tweens = []\n    this.maxNumber = 100\n\n    createjs.Touch.enable(this.stage);\n    this.stage.enableMouseOver(10);\n    this.stage.mouseMoveOutside = true\n    this.stage.on(\"stagemousemove\", e => this._tick(e));\n    this.mc.on('panmove', e => this._tick(e));\n\n    this._init()\n\n    createjs.Ticker.addEventListener(\"tick\", (e) => this._tick())\n  }\n\n  _init() {\n    this._renderObj()\n    this.stage.update()\n  }\n\n  _tick() {\n    this.objects.forEach(obj => {\n      var pt = obj.globalToLocal(this.stage.mouseX, this.stage.mouseY)\n      if( obj.hitTest(pt.x, pt.y) ) {\n        this.objMove(obj, { x: this.stage.mouseX, y: this.stage.mouseY }, this.lastMousePos)\n        obj.hitPos = null\n      } \n    })\n\n    this.lastMousePos = {\n      x: this.stage.mouseX,\n      y: this.stage.mouseY\n    }\n\n    this.stage.update()\n  }\n\n  objMove(obj, crtPos, lasPos) {\n    if( obj.isMove ) return\n\n    var ang = this.angle(lasPos.x, lasPos.y, crtPos.x, crtPos.y)\n    // console.log(crtPos, lasPos, )\n    var dest = {\n      x: Math.sin(ang * (Math.PI / 180)) * 70, \n      y: Math.cos(ang * (Math.PI / 180)) * 70\n    }\n\n    obj.isMove = true\n    // if( !this.tweens[obj.index]==false ) createjs.Tween.\n    this.tweens[obj.index] = createjs.Tween.get(obj).to({ \n      x: obj.x + dest.x, \n      y: obj.y + dest.y \n    }, 350, createjs.Ease.getPowOut(4)).call(() => {\n      obj.isMove = false\n      this.detectPositoin(obj, (obj.x + dest.x), (obj.y + dest.y))\n    })\n  }\n\n  detectPositoin(obj, x, y) {\n    if( x-20 < 0 || y-20 < 0 || x+20 > this.outer_w || y+20 > this.outer_h) {\n      var newX = (x - 20 < 0) ? 200 : (x + 20 > this.outer_w ? this.outer_w - 200 : x)\n      var newY = (y - 20 < 0) ? 200 : (y + 20 > this.outer_h ? this.outer_h - 200 : y)\n      \n      obj.isMove = true\n      this.tweens[obj.index] = createjs.Tween.get(obj).to({ \n        x: newX, \n        y: newY\n      }, 350, createjs.Ease.getPowOut(4)).call(() => {\n        obj.isMove = false\n        this.detectPositoin(newX, newY)\n      })\n    }\n  }\n  \n  angle(cx, cy, ex, ey) {\n    var dy = ey - cy;\n    var dx = ex - cx;\n    var theta = Math.atan2(dy, dx); // range (-PI, PI]\n    theta *= 180 / Math.PI; // rads to degs, range (-180, 180]\n    if (theta < 0) theta = 360 + theta; // range [0, 360)\n    return theta;\n  }\n\n  _renderObj() {\n    for(var i=0; i<this.maxNumber; i++) {\n      let shape = new createjs.Shape()\n      shape.graphics.beginStroke(\"#000000\").setStrokeStyle(2).moveTo(20,0).lineTo(40, 40).lineTo(0, 40).lineTo(20,0).closePath()\n      \n      shape.regX = 20\n      shape.regY = 20\n      \n      let rangeX = this.outer_w / 150\n      let rangeY = this.outer_h / 150\n      shape.x = this._getRandomInt(rangeX, this.outer_w - rangeX)\n      shape.y = this._getRandomInt(rangeY, this.outer_h - rangeY)\n\n      shape.hitPos = null\n      shape.isMove = false\n      shape.rotation = Math.random(10) * 1000\n      shape.hitArea = shape\n      shape.index = this.objects.length\n      \n      this.stage.addChild(shape) \n      this._doRotate(shape, 5000, Math.floor(Math.random() * 10) % 2)\n      this.objects.push(shape)\n    }\n  }\n  \n  _getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  _doRotate(shape, sec, dir) {\n    shape.rotation = 0\n    \n    createjs.Tween.get(shape).to({ rotation: dir > 0 ? 360 : -360 }, sec).call(() => {\n      this._doRotate(shape, sec, dir)\n    })\n  }\n}\n\n\nconst randObj = new RandomObj(\"random_obj\")"],"file":"random_obj.js"}